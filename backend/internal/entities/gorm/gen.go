// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Movie:           newMovie(db, opts...),
		MovieImage:      newMovieImage(db, opts...),
		Order:           newOrder(db, opts...),
		Permission:      newPermission(db, opts...),
		PriceType:       newPriceType(db, opts...),
		Role:            newRole(db, opts...),
		RolePermission:  newRolePermission(db, opts...),
		Schedule:        newSchedule(db, opts...),
		SchemaMigration: newSchemaMigration(db, opts...),
		Session:         newSession(db, opts...),
		Theater:         newTheater(db, opts...),
		TheatersSeat:    newTheatersSeat(db, opts...),
		TheatersSize:    newTheatersSize(db, opts...),
		User:            newUser(db, opts...),
		UserRole:        newUserRole(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Movie           movie
	MovieImage      movieImage
	Order           order
	Permission      permission
	PriceType       priceType
	Role            role
	RolePermission  rolePermission
	Schedule        schedule
	SchemaMigration schemaMigration
	Session         session
	Theater         theater
	TheatersSeat    theatersSeat
	TheatersSize    theatersSize
	User            user
	UserRole        userRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Movie:           q.Movie.clone(db),
		MovieImage:      q.MovieImage.clone(db),
		Order:           q.Order.clone(db),
		Permission:      q.Permission.clone(db),
		PriceType:       q.PriceType.clone(db),
		Role:            q.Role.clone(db),
		RolePermission:  q.RolePermission.clone(db),
		Schedule:        q.Schedule.clone(db),
		SchemaMigration: q.SchemaMigration.clone(db),
		Session:         q.Session.clone(db),
		Theater:         q.Theater.clone(db),
		TheatersSeat:    q.TheatersSeat.clone(db),
		TheatersSize:    q.TheatersSize.clone(db),
		User:            q.User.clone(db),
		UserRole:        q.UserRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Movie:           q.Movie.replaceDB(db),
		MovieImage:      q.MovieImage.replaceDB(db),
		Order:           q.Order.replaceDB(db),
		Permission:      q.Permission.replaceDB(db),
		PriceType:       q.PriceType.replaceDB(db),
		Role:            q.Role.replaceDB(db),
		RolePermission:  q.RolePermission.replaceDB(db),
		Schedule:        q.Schedule.replaceDB(db),
		SchemaMigration: q.SchemaMigration.replaceDB(db),
		Session:         q.Session.replaceDB(db),
		Theater:         q.Theater.replaceDB(db),
		TheatersSeat:    q.TheatersSeat.replaceDB(db),
		TheatersSize:    q.TheatersSize.replaceDB(db),
		User:            q.User.replaceDB(db),
		UserRole:        q.UserRole.replaceDB(db),
	}
}

type queryCtx struct {
	Movie           *movieDo
	MovieImage      *movieImageDo
	Order           *orderDo
	Permission      *permissionDo
	PriceType       *priceTypeDo
	Role            *roleDo
	RolePermission  *rolePermissionDo
	Schedule        *scheduleDo
	SchemaMigration *schemaMigrationDo
	Session         *sessionDo
	Theater         *theaterDo
	TheatersSeat    *theatersSeatDo
	TheatersSize    *theatersSizeDo
	User            *userDo
	UserRole        *userRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Movie:           q.Movie.WithContext(ctx),
		MovieImage:      q.MovieImage.WithContext(ctx),
		Order:           q.Order.WithContext(ctx),
		Permission:      q.Permission.WithContext(ctx),
		PriceType:       q.PriceType.WithContext(ctx),
		Role:            q.Role.WithContext(ctx),
		RolePermission:  q.RolePermission.WithContext(ctx),
		Schedule:        q.Schedule.WithContext(ctx),
		SchemaMigration: q.SchemaMigration.WithContext(ctx),
		Session:         q.Session.WithContext(ctx),
		Theater:         q.Theater.WithContext(ctx),
		TheatersSeat:    q.TheatersSeat.WithContext(ctx),
		TheatersSize:    q.TheatersSize.WithContext(ctx),
		User:            q.User.WithContext(ctx),
		UserRole:        q.UserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
