// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entities

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hal-cinema-2024/backend/internal/model"
)

func newTheater(db *gorm.DB, opts ...gen.DOOption) theater {
	_theater := theater{}

	_theater.theaterDo.UseDB(db, opts...)
	_theater.theaterDo.UseModel(&model.Theater{})

	tableName := _theater.theaterDo.TableName()
	_theater.ALL = field.NewAsterisk(tableName)
	_theater.TheaterID = field.NewString(tableName, "theater_id")
	_theater.TheaterSizeID = field.NewString(tableName, "theater_size_id")
	_theater.Name = field.NewString(tableName, "name")

	_theater.fillFieldMap()

	return _theater
}

type theater struct {
	theaterDo theaterDo

	ALL           field.Asterisk
	TheaterID     field.String
	TheaterSizeID field.String
	Name          field.String

	fieldMap map[string]field.Expr
}

func (t theater) Table(newTableName string) *theater {
	t.theaterDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t theater) As(alias string) *theater {
	t.theaterDo.DO = *(t.theaterDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *theater) updateTableName(table string) *theater {
	t.ALL = field.NewAsterisk(table)
	t.TheaterID = field.NewString(table, "theater_id")
	t.TheaterSizeID = field.NewString(table, "theater_size_id")
	t.Name = field.NewString(table, "name")

	t.fillFieldMap()

	return t
}

func (t *theater) WithContext(ctx context.Context) *theaterDo { return t.theaterDo.WithContext(ctx) }

func (t theater) TableName() string { return t.theaterDo.TableName() }

func (t theater) Alias() string { return t.theaterDo.Alias() }

func (t theater) Columns(cols ...field.Expr) gen.Columns { return t.theaterDo.Columns(cols...) }

func (t *theater) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *theater) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["theater_id"] = t.TheaterID
	t.fieldMap["theater_size_id"] = t.TheaterSizeID
	t.fieldMap["name"] = t.Name
}

func (t theater) clone(db *gorm.DB) theater {
	t.theaterDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t theater) replaceDB(db *gorm.DB) theater {
	t.theaterDo.ReplaceDB(db)
	return t
}

type theaterDo struct{ gen.DO }

func (t theaterDo) Debug() *theaterDo {
	return t.withDO(t.DO.Debug())
}

func (t theaterDo) WithContext(ctx context.Context) *theaterDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t theaterDo) ReadDB() *theaterDo {
	return t.Clauses(dbresolver.Read)
}

func (t theaterDo) WriteDB() *theaterDo {
	return t.Clauses(dbresolver.Write)
}

func (t theaterDo) Session(config *gorm.Session) *theaterDo {
	return t.withDO(t.DO.Session(config))
}

func (t theaterDo) Clauses(conds ...clause.Expression) *theaterDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t theaterDo) Returning(value interface{}, columns ...string) *theaterDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t theaterDo) Not(conds ...gen.Condition) *theaterDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t theaterDo) Or(conds ...gen.Condition) *theaterDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t theaterDo) Select(conds ...field.Expr) *theaterDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t theaterDo) Where(conds ...gen.Condition) *theaterDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t theaterDo) Order(conds ...field.Expr) *theaterDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t theaterDo) Distinct(cols ...field.Expr) *theaterDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t theaterDo) Omit(cols ...field.Expr) *theaterDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t theaterDo) Join(table schema.Tabler, on ...field.Expr) *theaterDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t theaterDo) LeftJoin(table schema.Tabler, on ...field.Expr) *theaterDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t theaterDo) RightJoin(table schema.Tabler, on ...field.Expr) *theaterDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t theaterDo) Group(cols ...field.Expr) *theaterDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t theaterDo) Having(conds ...gen.Condition) *theaterDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t theaterDo) Limit(limit int) *theaterDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t theaterDo) Offset(offset int) *theaterDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t theaterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *theaterDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t theaterDo) Unscoped() *theaterDo {
	return t.withDO(t.DO.Unscoped())
}

func (t theaterDo) Create(values ...*model.Theater) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t theaterDo) CreateInBatches(values []*model.Theater, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t theaterDo) Save(values ...*model.Theater) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t theaterDo) First() (*model.Theater, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Theater), nil
	}
}

func (t theaterDo) Take() (*model.Theater, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Theater), nil
	}
}

func (t theaterDo) Last() (*model.Theater, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Theater), nil
	}
}

func (t theaterDo) Find() ([]*model.Theater, error) {
	result, err := t.DO.Find()
	return result.([]*model.Theater), err
}

func (t theaterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Theater, err error) {
	buf := make([]*model.Theater, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t theaterDo) FindInBatches(result *[]*model.Theater, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t theaterDo) Attrs(attrs ...field.AssignExpr) *theaterDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t theaterDo) Assign(attrs ...field.AssignExpr) *theaterDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t theaterDo) Joins(fields ...field.RelationField) *theaterDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t theaterDo) Preload(fields ...field.RelationField) *theaterDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t theaterDo) FirstOrInit() (*model.Theater, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Theater), nil
	}
}

func (t theaterDo) FirstOrCreate() (*model.Theater, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Theater), nil
	}
}

func (t theaterDo) FindByPage(offset int, limit int) (result []*model.Theater, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t theaterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t theaterDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t theaterDo) Delete(models ...*model.Theater) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *theaterDo) withDO(do gen.Dao) *theaterDo {
	t.DO = *do.(*gen.DO)
	return t
}
