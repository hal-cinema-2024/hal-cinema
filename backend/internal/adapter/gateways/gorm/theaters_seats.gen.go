// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hal-cinema-2024/backend/internal/adapter/gateways/model"
)

func newTheatersSeat(db *gorm.DB, opts ...gen.DOOption) theatersSeat {
	_theatersSeat := theatersSeat{}

	_theatersSeat.theatersSeatDo.UseDB(db, opts...)
	_theatersSeat.theatersSeatDo.UseModel(&model.TheatersSeat{})

	tableName := _theatersSeat.theatersSeatDo.TableName()
	_theatersSeat.ALL = field.NewAsterisk(tableName)
	_theatersSeat.TheaterSeatID = field.NewString(tableName, "theater_seat_id")
	_theatersSeat.UserID = field.NewString(tableName, "user_id")
	_theatersSeat.ScheduleID = field.NewString(tableName, "schedule_id")
	_theatersSeat.SeatName = field.NewString(tableName, "seat_name")

	_theatersSeat.fillFieldMap()

	return _theatersSeat
}

type theatersSeat struct {
	theatersSeatDo theatersSeatDo

	ALL           field.Asterisk
	TheaterSeatID field.String
	UserID        field.String
	ScheduleID    field.String
	SeatName      field.String

	fieldMap map[string]field.Expr
}

func (t theatersSeat) Table(newTableName string) *theatersSeat {
	t.theatersSeatDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t theatersSeat) As(alias string) *theatersSeat {
	t.theatersSeatDo.DO = *(t.theatersSeatDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *theatersSeat) updateTableName(table string) *theatersSeat {
	t.ALL = field.NewAsterisk(table)
	t.TheaterSeatID = field.NewString(table, "theater_seat_id")
	t.UserID = field.NewString(table, "user_id")
	t.ScheduleID = field.NewString(table, "schedule_id")
	t.SeatName = field.NewString(table, "seat_name")

	t.fillFieldMap()

	return t
}

func (t *theatersSeat) WithContext(ctx context.Context) *theatersSeatDo {
	return t.theatersSeatDo.WithContext(ctx)
}

func (t theatersSeat) TableName() string { return t.theatersSeatDo.TableName() }

func (t theatersSeat) Alias() string { return t.theatersSeatDo.Alias() }

func (t theatersSeat) Columns(cols ...field.Expr) gen.Columns {
	return t.theatersSeatDo.Columns(cols...)
}

func (t *theatersSeat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *theatersSeat) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["theater_seat_id"] = t.TheaterSeatID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["schedule_id"] = t.ScheduleID
	t.fieldMap["seat_name"] = t.SeatName
}

func (t theatersSeat) clone(db *gorm.DB) theatersSeat {
	t.theatersSeatDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t theatersSeat) replaceDB(db *gorm.DB) theatersSeat {
	t.theatersSeatDo.ReplaceDB(db)
	return t
}

type theatersSeatDo struct{ gen.DO }

func (t theatersSeatDo) Debug() *theatersSeatDo {
	return t.withDO(t.DO.Debug())
}

func (t theatersSeatDo) WithContext(ctx context.Context) *theatersSeatDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t theatersSeatDo) ReadDB() *theatersSeatDo {
	return t.Clauses(dbresolver.Read)
}

func (t theatersSeatDo) WriteDB() *theatersSeatDo {
	return t.Clauses(dbresolver.Write)
}

func (t theatersSeatDo) Session(config *gorm.Session) *theatersSeatDo {
	return t.withDO(t.DO.Session(config))
}

func (t theatersSeatDo) Clauses(conds ...clause.Expression) *theatersSeatDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t theatersSeatDo) Returning(value interface{}, columns ...string) *theatersSeatDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t theatersSeatDo) Not(conds ...gen.Condition) *theatersSeatDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t theatersSeatDo) Or(conds ...gen.Condition) *theatersSeatDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t theatersSeatDo) Select(conds ...field.Expr) *theatersSeatDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t theatersSeatDo) Where(conds ...gen.Condition) *theatersSeatDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t theatersSeatDo) Order(conds ...field.Expr) *theatersSeatDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t theatersSeatDo) Distinct(cols ...field.Expr) *theatersSeatDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t theatersSeatDo) Omit(cols ...field.Expr) *theatersSeatDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t theatersSeatDo) Join(table schema.Tabler, on ...field.Expr) *theatersSeatDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t theatersSeatDo) LeftJoin(table schema.Tabler, on ...field.Expr) *theatersSeatDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t theatersSeatDo) RightJoin(table schema.Tabler, on ...field.Expr) *theatersSeatDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t theatersSeatDo) Group(cols ...field.Expr) *theatersSeatDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t theatersSeatDo) Having(conds ...gen.Condition) *theatersSeatDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t theatersSeatDo) Limit(limit int) *theatersSeatDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t theatersSeatDo) Offset(offset int) *theatersSeatDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t theatersSeatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *theatersSeatDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t theatersSeatDo) Unscoped() *theatersSeatDo {
	return t.withDO(t.DO.Unscoped())
}

func (t theatersSeatDo) Create(values ...*model.TheatersSeat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t theatersSeatDo) CreateInBatches(values []*model.TheatersSeat, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t theatersSeatDo) Save(values ...*model.TheatersSeat) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t theatersSeatDo) First() (*model.TheatersSeat, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheatersSeat), nil
	}
}

func (t theatersSeatDo) Take() (*model.TheatersSeat, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheatersSeat), nil
	}
}

func (t theatersSeatDo) Last() (*model.TheatersSeat, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheatersSeat), nil
	}
}

func (t theatersSeatDo) Find() ([]*model.TheatersSeat, error) {
	result, err := t.DO.Find()
	return result.([]*model.TheatersSeat), err
}

func (t theatersSeatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TheatersSeat, err error) {
	buf := make([]*model.TheatersSeat, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t theatersSeatDo) FindInBatches(result *[]*model.TheatersSeat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t theatersSeatDo) Attrs(attrs ...field.AssignExpr) *theatersSeatDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t theatersSeatDo) Assign(attrs ...field.AssignExpr) *theatersSeatDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t theatersSeatDo) Joins(fields ...field.RelationField) *theatersSeatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t theatersSeatDo) Preload(fields ...field.RelationField) *theatersSeatDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t theatersSeatDo) FirstOrInit() (*model.TheatersSeat, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheatersSeat), nil
	}
}

func (t theatersSeatDo) FirstOrCreate() (*model.TheatersSeat, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheatersSeat), nil
	}
}

func (t theatersSeatDo) FindByPage(offset int, limit int) (result []*model.TheatersSeat, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t theatersSeatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t theatersSeatDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t theatersSeatDo) Delete(models ...*model.TheatersSeat) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *theatersSeatDo) withDO(do gen.Dao) *theatersSeatDo {
	t.DO = *do.(*gen.DO)
	return t
}
