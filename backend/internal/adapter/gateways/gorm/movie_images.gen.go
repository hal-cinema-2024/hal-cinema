// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hal-cinema-2024/backend/internal/adapter/gateways/model"
)

func newMovieImage(db *gorm.DB, opts ...gen.DOOption) movieImage {
	_movieImage := movieImage{}

	_movieImage.movieImageDo.UseDB(db, opts...)
	_movieImage.movieImageDo.UseModel(&model.MovieImage{})

	tableName := _movieImage.movieImageDo.TableName()
	_movieImage.ALL = field.NewAsterisk(tableName)
	_movieImage.MovieID = field.NewString(tableName, "movie_id")
	_movieImage.FilePath = field.NewString(tableName, "file_path")
	_movieImage.Order = field.NewInt32(tableName, "order")

	_movieImage.fillFieldMap()

	return _movieImage
}

type movieImage struct {
	movieImageDo movieImageDo

	ALL      field.Asterisk
	MovieID  field.String
	FilePath field.String
	Order    field.Int32

	fieldMap map[string]field.Expr
}

func (m movieImage) Table(newTableName string) *movieImage {
	m.movieImageDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m movieImage) As(alias string) *movieImage {
	m.movieImageDo.DO = *(m.movieImageDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *movieImage) updateTableName(table string) *movieImage {
	m.ALL = field.NewAsterisk(table)
	m.MovieID = field.NewString(table, "movie_id")
	m.FilePath = field.NewString(table, "file_path")
	m.Order = field.NewInt32(table, "order")

	m.fillFieldMap()

	return m
}

func (m *movieImage) WithContext(ctx context.Context) *movieImageDo {
	return m.movieImageDo.WithContext(ctx)
}

func (m movieImage) TableName() string { return m.movieImageDo.TableName() }

func (m movieImage) Alias() string { return m.movieImageDo.Alias() }

func (m movieImage) Columns(cols ...field.Expr) gen.Columns { return m.movieImageDo.Columns(cols...) }

func (m *movieImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *movieImage) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["movie_id"] = m.MovieID
	m.fieldMap["file_path"] = m.FilePath
	m.fieldMap["order"] = m.Order
}

func (m movieImage) clone(db *gorm.DB) movieImage {
	m.movieImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m movieImage) replaceDB(db *gorm.DB) movieImage {
	m.movieImageDo.ReplaceDB(db)
	return m
}

type movieImageDo struct{ gen.DO }

func (m movieImageDo) Debug() *movieImageDo {
	return m.withDO(m.DO.Debug())
}

func (m movieImageDo) WithContext(ctx context.Context) *movieImageDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m movieImageDo) ReadDB() *movieImageDo {
	return m.Clauses(dbresolver.Read)
}

func (m movieImageDo) WriteDB() *movieImageDo {
	return m.Clauses(dbresolver.Write)
}

func (m movieImageDo) Session(config *gorm.Session) *movieImageDo {
	return m.withDO(m.DO.Session(config))
}

func (m movieImageDo) Clauses(conds ...clause.Expression) *movieImageDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m movieImageDo) Returning(value interface{}, columns ...string) *movieImageDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m movieImageDo) Not(conds ...gen.Condition) *movieImageDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m movieImageDo) Or(conds ...gen.Condition) *movieImageDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m movieImageDo) Select(conds ...field.Expr) *movieImageDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m movieImageDo) Where(conds ...gen.Condition) *movieImageDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m movieImageDo) Order(conds ...field.Expr) *movieImageDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m movieImageDo) Distinct(cols ...field.Expr) *movieImageDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m movieImageDo) Omit(cols ...field.Expr) *movieImageDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m movieImageDo) Join(table schema.Tabler, on ...field.Expr) *movieImageDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m movieImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *movieImageDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m movieImageDo) RightJoin(table schema.Tabler, on ...field.Expr) *movieImageDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m movieImageDo) Group(cols ...field.Expr) *movieImageDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m movieImageDo) Having(conds ...gen.Condition) *movieImageDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m movieImageDo) Limit(limit int) *movieImageDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m movieImageDo) Offset(offset int) *movieImageDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m movieImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *movieImageDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m movieImageDo) Unscoped() *movieImageDo {
	return m.withDO(m.DO.Unscoped())
}

func (m movieImageDo) Create(values ...*model.MovieImage) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m movieImageDo) CreateInBatches(values []*model.MovieImage, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m movieImageDo) Save(values ...*model.MovieImage) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m movieImageDo) First() (*model.MovieImage, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieImage), nil
	}
}

func (m movieImageDo) Take() (*model.MovieImage, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieImage), nil
	}
}

func (m movieImageDo) Last() (*model.MovieImage, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieImage), nil
	}
}

func (m movieImageDo) Find() ([]*model.MovieImage, error) {
	result, err := m.DO.Find()
	return result.([]*model.MovieImage), err
}

func (m movieImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MovieImage, err error) {
	buf := make([]*model.MovieImage, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m movieImageDo) FindInBatches(result *[]*model.MovieImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m movieImageDo) Attrs(attrs ...field.AssignExpr) *movieImageDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m movieImageDo) Assign(attrs ...field.AssignExpr) *movieImageDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m movieImageDo) Joins(fields ...field.RelationField) *movieImageDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m movieImageDo) Preload(fields ...field.RelationField) *movieImageDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m movieImageDo) FirstOrInit() (*model.MovieImage, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieImage), nil
	}
}

func (m movieImageDo) FirstOrCreate() (*model.MovieImage, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieImage), nil
	}
}

func (m movieImageDo) FindByPage(offset int, limit int) (result []*model.MovieImage, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m movieImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m movieImageDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m movieImageDo) Delete(models ...*model.MovieImage) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *movieImageDo) withDO(do gen.Dao) *movieImageDo {
	m.DO = *do.(*gen.DO)
	return m
}
